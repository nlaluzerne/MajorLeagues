I think that feature engineering could help establish additional value using exploratory data analysis in this
data set in a number of ways.
    1.  The date column can be removed. The goal is to predict the scores of each team, and the date does not
        affect the scores. With this said, I could see a scenario in which the date mattered because the
        performance of teams may differ over a period of years, but I did not consider this in my analysis.
    2.  The season column can be removed. Again, the goal is to predict the scores of each team, and the season
        does not affect the scores. There is the possibility that the season matters because teams have good
        seasons and bad seasons; however, when doing trials with and without the season included in the feature
        set, the regressor seemed to perform better without the season feature, so I left it out of the final
        analysis.
    3.  The neutral column can be removed. I don't quite understand what this column actually is, and doing a
        quick search of the column, there appears to be a very limited number (55) of significant values
        (values that aren't 0). Remove this column since there doesn't appear to be differentiating information
        in it so that it does not negatively affect regression.
    4.  The result1 column can be removed. This column marks whether team1 won the game or not.  Since winning
        the game has nothing to do with the amount of points you score (in football you can win with just 2
        points or as many points as possible), remove this column so it does not negatively bias the results.
    5.  Transform the team names from strings to numeric ids. Regressors can't deal with categorical data, so
        transform the team names to numerical data so they can be used in the regressor.

Process
    1.  Load the data set.
    2.  Remove the date, season, neutral, and result1 columns as these will not be considered when performing
        regression.
    3.  Remove any rows with missing data so that missing data does not negatively affect regression.
    4.  Transform the team names from categorical data to numeric data to be used in regression
    5.  Predict scores for team 1
        a.  Create the features and labels for regression. Features include attributes from the table except
            for the result we want. Features for team 1 include: playoff, team1, team2, elo1, elo2, and elo_prob1.
            Even though we are trying to predict team1's score, we do not include team2's score in the feature set
            because the scores of either team are independent of each other. The label is the result we want from
            the regression and for this iteration it is score1.
        b.  Split the labels and features into testing and training sets. The training sets will be used to
            train the regressor and the testing sets will be used to test the accuracy of the predictions that the
            regressor makes. For this project I chose to use a ratio of 80/20; 80% of the data is used for training
            the regressor and 20% of the data is used for testing the regressor.
        c.  Create the regressor. For this project, I decided to try a Random Forest Regression because they are
            known for being fast and accurate. I used Scikit Learn's RandomForestRegressor() to implement my
            random forest and used 500 trees. I let the method auto-decide the number of features to use for each
            of the trees.
        d.  Train the Random Forest Regressor and predict the scores for team1. I trained the regressor using the
            training sets I created above. Once the regressor was trained, I used the test features set to try to
            predict team1's scores correctly.
        e.  Calculate the average score prediction errors for team1. To test the regressor's accuracy, I did a
            difference comparison between the score predictions from the regressor and what the actual scores were
            from the scores test set. To do this, I simply took the differrence between the predicted score and the
            actual score for each test case, then took the mean of the differences.
    6. Predict scores for team 2
        a.  Create the features and labels for regression. Features include attributes from the table except
            for the result we want. Features for team 1 include: playoff, team1, team2, elo1, elo2, and elo_prob1.
            Even though we are trying to predict team2's score, we do not include team1's score in the feature set
            because the scores of either team are independent of each other. The label is the result we want from
            the regression and for this iteration it is score1.
        b.  Split the labels and features into testing and training sets. The training sets will be used to
            train the regressor and the testing sets will be used to test the accuracy of the predictions that the
            regressor makes. For this project I chose to use a ratio of 80/20; 80% of the data is used for training
            the regressor and 20% of the data is used for testing the regressor.
        c.  Create the regressor. For this project, I decided to try a Random Forest Regression because they are
            known for being fast and accurate. I used Scikit Learn's RandomForestRegressor() to implement my
            random forest and used 500 trees. I let the method auto-decide the number of features to use for each
            of the trees.
        d.  Train the Random Forest Regressor and predict the scores for team2. I trained the regressor using the
            training sets I created above. Once the regressor was trained, I used the test features set to try to
            predict team2's scores correctly.
        e.  Calculate the average score prediction errors for team2. To test the regressor's accuracy, I did a
            difference comparison between the score predictions from the regressor and what the actual scores were
            from the scores test set. To do this, I simply took the differrence between the predicted score and the
            actual score for each test case, then took the mean of the differences.

Results
    Using a Random Forest Regressor with 500 trees, I was able to correctly predict the scores of team1 within an
    average of 0.02429 points and correctly predict the scores of team2 within an average of -0.08702 points.

    Using the Random Forest Regressor appeared to be very accurate. On average, the random forest regressor was
    within less than a point of the acutal score of any given team at any given matchup. The positive-valued
    errors represent an over-prediction by the regressor (the regressor predicted a score higher than what was
    actually scored) and negative-valued errors represent an under-prediction by the regressor (the regressor
    predicted a score lower than what was acutally scored).

    To improve upon the accuracy of the regressor, one thing that could be easily adjusted would be the number of
    trees used in the random forest regressor. Other things that could be used to potentially improve the accuracy
    would be to see if the date and the season data actually does affect the number of points a team scores.


